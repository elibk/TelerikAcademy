/// <reference path="prototype.js" />
/// <reference path="jquery-2.0.2.js" />
/// <reference path="random-from-to.js" />
/// <reference path="RecyclingGameNS.js" />
/// <reference path="string-extention.js" />
/// <reference path="TrashBinsNS.js" />
/// <reference path="trash-bin.js" />
/// <reference path="recycling-trash-bin.js" />
/// <reference path="TrashNS.js" />
/// <reference path="trash.js" />
/// <reference path="recycling-trash.js" />
/// <reference path="scoreboard.js" />
/// <reference path="timer.js" />
/// <reference path="recyclingType.js" />


RecyclingGameNS.GameEngine = Class.create({

    initialize: function initGame(scoreboard, timer) {
        this.container = $('#game-container');
        this.dumpsite = $('#dumpsite');

        this.scoreboard = scoreboard;
        this.timer = timer;

        this.initialTrashCount = 3;
        this.stepOfIncreasing = 3;
        this.initailTime = 300;

        this.scoreUpToNow = 0;
        this.currentLevel = 0;
        //this.remainingTrash = 0;

        this.trashBins = [
             new RecyclingGameNS.TrashBins.RecyclingTrashBin('../images/plastic-and-iron-can.png', RecyclingGameNS.recyclingType.plasticAndIron),
             new RecyclingGameNS.TrashBins.RecyclingTrashBin('../images/glass-can.png', RecyclingGameNS.recyclingType.glass),
             new RecyclingGameNS.TrashBins.RecyclingTrashBin('../images/paper-can.png', RecyclingGameNS.recyclingType.paper),
        ];
        
        this._renderTrashBins();
        this.trash = [];
    },

    _renderTrashBins: function renderTrashBins() {
        for (var i = 0; i < this.trashBins.length; i += 1) {
            this.trashBins[i].setInTheField(this.container);
            this.trashBins[i].initEvents(this);
        }
    },

    newGame: function newGame() {
       
        this.scoreUpToNow = 0;
        this.currentLevel = 0;
        this.remainingTrash = 0;
        this._cleanOldTrash();
        this.nextLevel();
    },

    _cleanOldTrash: function cleanOldTrash() {

        for (var i = 0; i < this.trash.length; i++) {
            this.trash[i].dispose();
        }

        this.trash = [];
    },

    _generateTrash: function generateTrash(currentTrashCount) {

        var paperTrashCount = $.randomFromTo(0, currentTrashCount);
        currentTrashCount = currentTrashCount - paperTrashCount;
        var plasticTrashCount = $.randomFromTo(0, currentTrashCount);
        var glassTrashCount = currentTrashCount - plasticTrashCount;

        var i;
        var id = 0;
        var newTrash;

        //for (i = 0; i < 8; i += 1) {
        //    newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/paper.png', RecyclingGameNS.recyclingType.paper);
        //    newTrash.setId(i);
        //    this.trash.push(newTrash);
        //    newTrash.throwIt(this.dumpsite);
        //}

        for (i = 0; i < paperTrashCount; i++) {
            if (i % 2 === 0) {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/paper.png', RecyclingGameNS.recyclingType.paper);
            } else {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/cardboard-box.png', RecyclingGameNS.recyclingType.paper);
            }
            
            newTrash.setId(id++);
            this.trash.push(newTrash);
            newTrash.throwIt(this.dumpsite);
            
        }

        for (i = 0; i < plasticTrashCount; i++) {

            if (i % 2 === 0) {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/can.png', RecyclingGameNS.recyclingType.plasticAndIron);
            }
            else if (i % 2 === 1) {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/platic-cup.png', RecyclingGameNS.recyclingType.plasticAndIron);
            }
            else {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/plastic-bottle.png', RecyclingGameNS.recyclingType.plasticAndIron);
            }

            newTrash.setId(id++);
            this.trash.push(newTrash);
            newTrash.throwIt(this.dumpsite);

        }

        for (i = 0; i < glassTrashCount; i++) {

            if (i % 2 === 0) {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/bottle.png', RecyclingGameNS.recyclingType.glass);
            } else {
                newTrash = new RecyclingGameNS.TrashItems.RecyclingTrash('../images/glass.png', RecyclingGameNS.recyclingType.glass);
            }

            newTrash.setId(id++);
            this.trash.push(newTrash);
            newTrash.throwIt(this.dumpsite);

        }
    },

    _cleanTrash: function (currentTrashElement, currentTrashBinType) {
        var dragetTrashId = $(currentTrashElement).attr('id');
        var currentTrash = this.trash[dragetTrashId];
        if (currentTrash.getType() === currentTrashBinType) {

            currentTrash.dispose();
            this.trash.splice(dragetTrashId, 1);

            if (this.trash.length === 0) {
                this.scoreUpToNow += this.scoreboard.calculateScore(this.timer.pastTime, this.currentLevel);

                this.nextLevel();
            }
        }
        else {

            return;
        }
    },

    nextLevel: function nextLevel() {
        this.currentLevel++;
        var currentTrashCount = this.currentLevel * this.stepOfIncreasing + this.initialTrashCount;
        // time ???
        //ToDo: setTimer
        this._generateTrash(currentTrashCount);
    },

    gameOver: function gameOver() {
       
        var playerName = this.scoreboard.getPlayersName();
        this.scoreboard.saveData(playerName, this.scoreUpToNow);
        this.scoreboard.loadData();
    },

});